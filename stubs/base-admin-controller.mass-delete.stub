<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{ domain }}\Admin\Create{{ model }}Request;
use App\Http\Requests\{{ domain }}\Admin\Update{{ model }}Request;
use Domain\{{ domain }}\DTOs\Fill{{ model }}DTO;
use Domain\{{ domain }}\Models\{{ model }};
use Domain\{{ domain }}\Services\Admin\{{ model }}Service;
use Domain\{{ domain }}\ViewModels\Admin\{{ model }}IndexViewModel;
use Domain\{{ domain }}\ViewModels\Admin\{{ model }}UpdateViewModel;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Foundation\Application;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Redirector;
use App\Http\Requests\MassDeletingRequest;
use Support\Actions\MassDeletingAction;
use Support\DTOs\MassDeletingDTO;
use Support\Exceptions\MassDeletingException;
{{ importFilterRequest }}

class {{ model }}Controller extends Controller
{
    public function __construct()
    {
        //        $this->authorizeResource({{ model }}::class, '{{ kebabModel }}');
    }

    public function index({{ filterRequest }}): View|Application|Factory|\Illuminate\Contracts\Foundation\Application
    {
        return view('admin.{{ snakeDomain }}.{{ kebabModelWithoutDomain }}.index', new {{ model }}IndexViewModel());
    }

    public function create(): View|Application|Factory|\Illuminate\Contracts\Foundation\Application
    {
        return view('admin.{{ snakeDomain }}.{{ kebabModelWithoutDomain }}.create');
    }

    public function store(Create{{ model }}Request $request, {{ model }}Service ${{ camelModel }}Service): Application|Redirector|RedirectResponse|\Illuminate\Contracts\Foundation\Application
    {
        ${{ camelModel }}Service->create(Fill{{ model }}DTO::fromRequest($request));

        flash()->info(__('{{ kebabDomain }}.{{ langModel }}.created'));

        return to_route('admin.{{ kebabPluralModel }}.index');
    }

    public function show(string $id)
    {
        //
    }

    public function edit({{ model }} ${{ camelModel }}): View|Application|Factory|\Illuminate\Contracts\Foundation\Application
    {
        return view('admin.{{ snakeDomain }}.{{ kebabModelWithoutDomain }}.edit', new {{ model }}UpdateViewModel(${{ camelModel }}));
    }

    public function update(Update{{ model }}Request $request, {{ model }} ${{ camelModel }}, {{ model }}Service ${{ camelModel }}Service): RedirectResponse
    {
        ${{ camelModel }}Service->update(${{ camelModel }}, Fill{{ model }}DTO::fromRequest($request));

        flash()->info(__('{{ kebabDomain }}.{{ langModel }}.updated'));

        return to_route('admin.{{ kebabPluralModel }}.index');
    }

    public function destroy({{ model }} ${{ camelModel }}): RedirectResponse
    {
        ${{ camelModel }}->delete();

        flash()->info(__('{{ kebabDomain }}.{{ langModel }}.deleted'));

        return to_route('admin.{{ kebabPluralModel }}.index');
    }

        /**
         * @throws MassDeletingException
         */
        public function deleteSelected(MassDeletingRequest $request, MassDeletingAction $deletingAction): RedirectResponse
        {
            $deletingAction(
                MassDeletingDTO::make(
                    {{ model }}::class,
                    $request->input('ids')
                )
            );

            flash()->info(__('{{ kebabDomain }}.{{ langModel }}.mass_deleted'));

            return to_route('admin.{{ kebabPluralModel }}.index');
        }

        /**
         * @throws MassDeletingException
         */
        public function forceDeleteSelected(MassDeletingRequest $request, MassDeletingAction $deletingAction): RedirectResponse
        {
            $deletingAction(
                MassDeletingDTO::make(
                    {{ model }}::class,
                    $request->input('ids'),
                    true
                )
            );

            flash()->info(__('{{ kebabDomain }}.{{ langModel }}.mass_force_deleted'));

            return to_route('admin.{{ kebabPluralModel }}.index');
        }
}
